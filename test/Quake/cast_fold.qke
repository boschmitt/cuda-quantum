// ========================================================================== //
// Copyright (c) 2022 - 2025 NVIDIA Corporation & Affiliates.                 //
// All rights reserved.                                                       //
//                                                                            //
// This source code and the accompanying materials are made available under   //
// the terms of the Apache License 2.0 which accompanies this distribution.   //
// ========================================================================== //

// RUN: cudaq-opt %s -split-input-file -pass-pipeline='builtin.module(func.func(canonicalize))' | FileCheck %s

// CHECK:      func.func @b1() -> f32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 2.200000e+01 : f32
// CHECK-NEXT:   return %[[VAL_0]] : f32
// CHECK-NEXT: }

func.func @b1() -> f32 {
  %0 = arith.constant 22 : i64
  %1 = cc.cast signed %0 : (i64) -> f32
  return %1 : f32
}

// -----

// CHECK:      func.func @b2() -> f32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 1.84467441E+19 : f32
// CHECK-NEXT:   return %[[VAL_0]] : f32
// CHECK-NEXT: }

func.func @b2() -> f32 {
  %0 = arith.constant -21 : i64
  %1 = cc.cast unsigned %0 : (i64) -> f32
  return %1 : f32
}

// -----

// CHECK:      func.func @b3() -> f32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 2.340000e+00 : f32
// CHECK-NEXT:   return %[[VAL_0]] : f32
// CHECK-NEXT: }

func.func @b3() -> f32 {
  %0 = arith.constant 2.34 : f64
  %1 = cc.cast %0 : (f64) -> f32
  return %1 : f32
}

// -----

// CHECK:      func.func @b4() -> f64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 6.3400001525878906 : f64
// CHECK-NEXT:   return %[[VAL_0]] : f64
// CHECK-NEXT: }

func.func @b4() -> f64 {
  %0 = arith.constant 6.34 : f32
  %1 = cc.cast %0 : (f32) -> f64
  return %1 : f64
}

// -----

// CHECK:      func.func @b5() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 94 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @b5() -> i32 {
  %0 = arith.constant 94 : i64
  %1 = cc.cast %0 : (i64) -> i32
  return %1 : i32
}

// -----

// CHECK:      func.func @b6() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 73 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @b6() -> i64 {
  %0 = arith.constant 73 : i16
  %1 = cc.cast signed %0 : (i16) -> i64
  return %1 : i64
}

// -----

// CHECK:      func.func @b7() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 65454 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @b7() -> i64 {
  %0 = arith.constant -82 : i16
  %1 = cc.cast unsigned %0 : (i16) -> i64
  return %1 : i64
}

// -----

// CHECK:      func.func @b8() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -6 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @b8() -> i64 {
  %0 = arith.constant -6.29 : f32
  %1 = cc.cast signed %0 : (f32) -> i64
  return %1 : i64
}

// -----

// CHECK:      func.func @b9() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 7 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @b9() -> i32 {
  %0 = arith.constant 7.11 : f64
  %1 = cc.cast unsigned %0 : (f64) -> i32
  return %1 : i32
}

// -----

// CHECK:      func.func @b_ib() -> i1 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant true
// CHECK-NEXT:   return %[[VAL_0]] : i1
// CHECK-NEXT: }

func.func @b_ib() -> i1 {
  %0 = arith.constant true
  %1 = cc.cast signed %0 : (i1) -> i1
  return %1 : i1
}

// -----

// CHECK:      func.func @b_ub() -> i1 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant true
// CHECK-NEXT:   return %[[VAL_0]] : i1
// CHECK-NEXT: }

func.func @b_ub() -> i1 {
  %0 = arith.constant true
  %1 = cc.cast unsigned %0 : (i1) -> i1
  return %1 : i1
}

// -----

// CHECK:      func.func @b_i8() -> i8 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i8
// CHECK-NEXT:   return %[[VAL_0]] : i8
// CHECK-NEXT: }

func.func @b_i8() -> i8 {
  %0 = arith.constant true
  %1 = cc.cast signed %0 : (i1) -> i8
  return %1 : i8
}

// -----

// CHECK:      func.func @b_u8() -> i8 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 1 : i8
// CHECK-NEXT:   return %[[VAL_0]] : i8
// CHECK-NEXT: }

func.func @b_u8() -> i8 {
  %0 = arith.constant true
  %1 = cc.cast unsigned %0 : (i1) -> i8
  return %1 : i8
}

// -----

// CHECK:      func.func @b_i16() -> i16 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i16
// CHECK-NEXT:   return %[[VAL_0]] : i16
// CHECK-NEXT: }

func.func @b_i16() -> i16 {
  %0 = arith.constant true
  %1 = cc.cast signed %0 : (i1) -> i16
  return %1 : i16
}

// -----

// CHECK:      func.func @b_u16() -> i16 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 1 : i16
// CHECK-NEXT:   return %[[VAL_0]] : i16
// CHECK-NEXT: }

func.func @b_u16() -> i16 {
  %0 = arith.constant true
  %1 = cc.cast unsigned %0 : (i1) -> i16
  return %1 : i16
}

// -----

// CHECK:      func.func @b_i32() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @b_i32() -> i32 {
  %0 = arith.constant true
  %1 = cc.cast signed %0 : (i1) -> i32
  return %1 : i32
}

// -----

// CHECK:      func.func @b_u32() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 1 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @b_u32() -> i32 {
  %0 = arith.constant true
  %1 = cc.cast unsigned %0 : (i1) -> i32
  return %1 : i32
}

// -----

// CHECK:      func.func @b_i64() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @b_i64() -> i64 {
  %0 = arith.constant true
  %1 = cc.cast signed %0 : (i1) -> i64
  return %1 : i64
}

// -----

// CHECK:      func.func @b_u64() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 1 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @b_u64() -> i64 {
  %0 = arith.constant true
  %1 = cc.cast unsigned %0 : (i1) -> i64
  return %1 : i64
}

// -----

// CHECK:      func.func @i32_ib() -> i1 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant true
// CHECK-NEXT:   return %[[VAL_0]] : i1
// CHECK-NEXT: }

func.func @i32_ib() -> i1 {
  %0 = arith.constant -1 : i32
  %1 = cc.cast %0 : (i32) -> i1
  return %1 : i1
}

// -----

// CHECK:      func.func @i32_i8() -> i8 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i8
// CHECK-NEXT:   return %[[VAL_0]] : i8
// CHECK-NEXT: }

func.func @i32_i8() -> i8 {
  %0 = arith.constant -1 : i32
  %1 = cc.cast %0 : (i32) -> i8
  return %1 : i8
}

// -----

// CHECK:      func.func @i32_i16() -> i16 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i16
// CHECK-NEXT:   return %[[VAL_0]] : i16
// CHECK-NEXT: }

func.func @i32_i16() -> i16 {
  %0 = arith.constant -1 : i32
  %1 = cc.cast %0 : (i32) -> i16
  return %1 : i16
}

// -----

// CHECK:      func.func @i32_i32() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @i32_i32() -> i32 {
  %0 = arith.constant -1 : i32
  %1 = cc.cast signed %0 : (i32) -> i32
  return %1 : i32
}

// -----

// CHECK:      func.func @i32_u32() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @i32_u32() -> i32 {
  %0 = arith.constant -1 : i32
  %1 = cc.cast unsigned %0 : (i32) -> i32
  return %1 : i32
}

// -----

// CHECK:      func.func @i32_i64() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @i32_i64() -> i64 {
  %0 = arith.constant -1 : i32
  %1 = cc.cast signed %0 : (i32) -> i64
  return %1 : i64
}


// -----

// CHECK:      func.func @i32_u64() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 4294967295 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @i32_u64() -> i64 {
  %0 = arith.constant -1 : i32
  %1 = cc.cast unsigned %0 : (i32) -> i64
  return %1 : i64
}


// -----

// CHECK:      func.func @u32_u64() -> i64 {
// CHECK-NETX:   %[[VAL_0:.*]] = arith.constant 4294967295 : i64
// CHECK-NETX:   return %[[VAL_0]] : i64
// CHECK-NETX: }

func.func @u32_u64() -> i64 {
  %0 = arith.constant 4294967295 : i32
  %1 = cc.cast unsigned %0 : (i32) -> i64
  return %1 : i64
}

// -----

// CHECK:      func.func @u32_i64() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @u32_i64() -> i64 {
  %0 = arith.constant 4294967295 : i32
  %1 = cc.cast signed %0 : (i32) -> i64
  return %1 : i64
}

// -----

// CHECK:      func.func @i32_nop() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @i32_nop() -> i32 {
  %0 = arith.constant -1: i32
  %1 = cc.cast %0 : (i32) -> i32
  return %1 : i32
}

// -----

// CHECK:      func.func @i32_repeat() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @i32_repeat() -> i32 {
  %0 = arith.constant -1: i32
  %1 = cc.cast unsigned %0 : (i32) -> i32
  %2 = cc.cast unsigned %1 : (i32) -> i32
  return %2 : i32
}

// -----

// CHECK:      func.func @i32_change_sign() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i32
// CHECK-NEXT:   return %[[VAL_0]] : i32
// CHECK-NEXT: }

func.func @i32_change_sign() -> i32 {
  %0 = arith.constant -1: i32
  %1 = cc.cast signed %0 : (i32) -> i32
  %2 = cc.cast unsigned %1 : (i32) -> i32
  return %2 : i32
}

// -----

// CHECK:      func.func @i32_change_type() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant 4294967295 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @i32_change_type() -> i64 {
  %0 = arith.constant -1: i32
  %1 = cc.cast unsigned %0 : (i32) -> i32
  %2 = cc.cast unsigned %1 : (i32) -> i64
  return %2 : i64
}

// -----

// CHECK:      func.func @i32_change_type_and_sign() -> i64 {
// CHECK-NEXT:   %[[VAL_0:.*]] = arith.constant -1 : i64
// CHECK-NEXT:   return %[[VAL_0]] : i64
// CHECK-NEXT: }

func.func @i32_change_type_and_sign() -> i64 {
  %0 = arith.constant -1: i32
  %1 = cc.cast unsigned %0 : (i32) -> i32
  %2 = cc.cast signed %1 : (i32) -> i64
  return %2 : i64
}

// -----

// CHECK:      func.func @p32_u64() -> i32 {
// CHECK-NEXT:   %[[VAL_0:.*]] = cc.alloca i32
// CHECK-NEXT:   %[[VAL_1:.*]] = cc.cast %[[VAL_0]] : (!cc.ptr<i32>) -> i64
// CHECK-NEXT:   %[[VAL_2:.*]] = cc.cast %[[VAL_1]] : (i64) -> i32
// CHECK-NEXT:   return %[[VAL_2]] : i32
// CHECK-NEXT: }

func.func @p32_u64() -> i32 {
  %0 = cc.alloca i32
  %1 = cc.cast %0 : (!cc.ptr<i32>) -> i64
  %2 = cc.cast %1 : (i64) -> i32
  return %2 : i32
}

// -----

// CHECK:      func.func @castAndTest() {
// CHECK-NEXT:   %true = arith.constant true
// CHECK-NEXT:   %0 = quake.alloca !quake.ref
// CHECK-NEXT:   cc.if(%true) {
// CHECK-NEXT:     quake.x %0 : (!quake.ref) -> ()
// CHECK-NEXT:   }
// CHECK-NEXT:   return
// CHECK-NEXT: }

func.func @castAndTest () {
    %c0 = arith.constant -1 : i32
    %c1 = arith.constant 4294967295 : i64
    %0 = cc.cast unsigned %c0 : (i32) -> i32
    %1 = cc.cast unsigned %0 : (i32) -> i64
    %2 = quake.alloca !quake.ref
    %3 = arith.cmpi eq, %1, %c1 : i64
    cc.if(%3) {
      quake.x %2 : (!quake.ref) -> ()
    }
    return
  }

// -----

// CHECK:      func.func @castIntToBool() -> i1 {
// CHECK-NEXT:   %true = arith.constant true
// CHECK-NEXT:   return %true : i1
// CHECK-NEXT: }

func.func @castIntToBool() -> i1 {
  %0 = arith.constant 800 : i16
  %1 = cc.cast %0 : (i16) -> i1
  return %1: i1
}
