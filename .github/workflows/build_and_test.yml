name: Build and test

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/build_and_test.yml'
      - '**.cpp'
      - '**.h'
      - '**.in'
      - '**.py'
      - '**.mlir'
      - '**.qtx'
      - '**.qke'
      - '**/CMakeLists.txt'
  pull_request:
    branches: [main]
    types: [assigned, opened, synchronize, reopened]
    paths:
      - '.github/workflows/build_and_test.yml'
      - '**.cpp'
      - '**.h'
      - '**.in'
      - '**.py'
      - '**.mlir'
      - '**.qtx'
      - '**.qke'
      - '**/CMakeLists.txt'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    container: ghcr.io/${{ github.repository }}-dev:${{ matrix.compiler.cc }}-latest
    permissions:
      actions: write
    strategy:
      matrix:
        compiler:
          - cc: clang-15
            cxx: clang++-15
            build-type: Debug
          - cc: gcc-11
            cxx: g++-11
            build-type: Release
          - cc: gcc-12
            cxx: g++-12
            build-type: Release

    steps:
      - name: Decompress LLVM build
        run: tar --posix --use-compress-program=unzstd -C /opt -xf /llvm.tar.tzst

      - name: Get code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set git safe
        run: git config --global --add safe.directory $PWD

      - name: Get LLVM build id
        id: get-llvm-build-id
        uses: ./.github/actions/get-llvm-build-id
        with:
          toolchain: ${{ matrix.compiler.cc }}

      - name: Check LLVM build id
        run: |
          LLVM_ID="$(cat /opt/llvm/cache-key)"
          if [ "$LLVM_ID" != "${{ steps.get-llvm-build-id.outputs.id }}" ]; then
            echo "::error::Dev image not updated yet"
            exit 1
          fi

      - name: Check formatting
        uses: ./.github/actions/check-formatting

      - name: Build
        uses: ./.github/actions/build-cudaq
        with:
          cc: ${{ matrix.compiler.cc }}
          cxx: ${{ matrix.compiler.cxx }}
          build-type: ${{ matrix.compiler.build-type }}
          llvm-prefix: /opt/llvm

      - name: Run tests
        run: ctest --output-on-failure --test-dir build

