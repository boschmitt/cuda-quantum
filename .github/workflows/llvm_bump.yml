name: LLVM bump

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/llvm_bump.yml'
      - '.github/actions/get-llvm-build/**'
      - 'tpls/llvm/**'
  pull_request:
    branches: [main]
    types: [assigned, opened, synchronize, reopened]
    paths:
      - '.github/workflows/llvm_bump.yml'
      - '.github/actions/get-llvm-build/**'
      - 'tpls/llvm/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux-build:
    name: Linux build
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - cc: clang-15
            cxx: clang++-15
            mode: Debug
          - cc: gcc-11
            cxx: g++-11
            mode: Release
          - cc: gcc-12
            cxx: g++-12
            mode: Release

    steps:
      - name: Install requirements
        run: |
          apt-get update
          apt-get install -y --no-install-recommends software-properties-common gpg gpg-agent
          add-apt-repository ppa:apt-fast/stable
          apt-get install -y --no-install-recommends apt-fast
          apt-fast install -y --no-install-recommends git gh cmake ninja-build ${{ matrix.compiler.cxx }} lld-15 curl libblas-dev zstd python3 python3-pip libpython3-dev
          ln -s /usr/bin/ld.lld-15 /usr/bin/ld.lld

      - name: Get code
        uses: actions/checkout@v3

      - name: Set git safe
        run: git config --global --add safe.directory $PWD

      - name: Get LLVM build
        uses: ./.github/actions/get-llvm-build
        with:
          toolchain: ${{ matrix.compiler.cc }}
          cc: ${{ matrix.compiler.cc }}
          cxx: ${{ matrix.compiler.cxx }}
          only-restore: 'false'

      - name: CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          append-timestamp: false
          key: cudaq-${{ runner.os }}-${{ matrix.compiler.cc }}-${{ matrix.compiler.mode }}
          save: ${{ github.ref_name == 'main' }}

      - name: Install python requirements
        run: pip install numpy pytest lit

      - name: Build
        run: .github/workflows/scripts/build_cudaq.sh ${{ matrix.compiler.mode }} ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }} ccache

      - name: Run tests
        run: ctest --output-on-failure --test-dir build

      - name: Cleanup CUDA Quantum build cache entry
        if: ${{ github.ref_name == 'main' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete cudaq-${{ runner.os }}-${{ matrix.compiler.cc }}-${{ matrix.compiler.mode }} -R ${{ github.repository }} --confirm


  # macos-build:
  #   name: macOS build
  #   runs-on: macos-latest
  #   env:
  #     toolchain: clang-15
  #     cc: $(brew --prefix llvm@15)/bin/clang
  #     cxx: $(brew --prefix llvm@15)/bin/clang++
  #
  #   steps:
  #     - name: Install requirements
  #       run: brew install ninja
  #
  #     - name: Get code
  #       uses: actions/checkout@v3
  #
  #     - name: Set git safe
  #       run: git config --global --add safe.directory $PWD
  #
  #     - name: Get LLVM build
  #       uses: ./.github/actions/get-llvm-build
  #       with:
  #         toolchain: ${{ env.toolchain }}
  #         cc: ${{ env.cc }}
  #         cxx: ${{ env.cxx }}
  #         only-restore: 'false'
  #
  #     - name: CCache
  #       uses: hendrikmuhs/ccache-action@v1.2
  #       with:
  #         append-timestamp: false
  #         key: cudaq-${{ runner.os }}-${{ env.toolchain }}-Release
  #         save: ${{ github.ref_name == 'main' }}
  #
  #     - name: Install python requirements
  #       run: pip install numpy pytest lit
  #
  #     - name: Build
  #       run: .github/workflows/scripts/build_cudaq.sh Debug ${{ env.cc }} ${{ env.cxx }} ccache
  #
  #     - name: Run tests
  #       run: |
  #         ctest --output-on-failure --test-dir build
